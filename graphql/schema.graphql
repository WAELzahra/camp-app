"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Account of a person who utilizes this application."
type User @model {
  id: ID!
  name: String!
  email: String!
  email_verified_at: DateTime
  created_at: DateTime!
  updated_at: DateTime!
}
type Boutique @model {
  id: ID!
  users_id: ID!
  nom_boutique: String!
  description: String
  status: Boolean!
  created_at: DateTime
  updated_at: DateTime
}
type Reservations_centre @model {
  user_id: User! @belongsTo(relation: "user")
  centre_id: User! @belongsTo(relation: "centre")

  date_debut: DateTime!
  date_fin: DateTime!
  nbr_place: Int!
  note: String!
  type: String!
  status: ReservationStatus!

  payments_id: Payments! @belongsTo(relation: "payment")

  created_at: DateTime!
  updated_at: DateTime!
}
enum ReservationStatus {
  pending
  approved
  rejected
  canceled
}
type Annonce @model {
  id: ID!
  user_id: User! @belongsTo(relation: "user")
  description: String!
  status: AnnonceStatus!
  photos: [Photo!]! @hasMany
}

enum AnnonceStatus {
  up
  down
}

type Photo @model {
  id: ID!
  pathToImage: String!
  annonce_id: Annonce! @belongsTo(relation: "annonce")
}
type Payments @model {
  id: ID!
  montant: Float!
  description: String!
  status: PaymentStatus!
  created_at: DateTime!
  updated_at: DateTime!
}

enum PaymentStatus {
  pending
  done
  cancel
}
input ReservationIdentifierInput {
  user_id: Int!
  centre_id: Int!
  date_debut: DateTime!
}

type ReservationMutationResponse {
  success: Boolean!
  message: String!
}
type Query {
  # Find a single user
  user(
    id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
  ): User @find

  # Paginated list of users
  users(name: String @where(operator: "like")): [User!]! @paginate(defaultCount: 10)

  # Boutique by ID
  boutique(id: ID!): Boutique @find

  # All Reservations for Centres
  allReservationsCentre: [Reservations_centre!]! @all(model: "App\\Models\\Reservations_centre")

  # Single Reservation Centre
  reservationCentre(id: ID!): Reservations_centre @find(model: "App\\Models\\Reservations_centre")

  # Single Reservation
  reservation(id: ID!): Reservation @find(model: "App\\Models\\Reservation")
}
type Mutation {
  # Boutique management
  addBoutique(nom_boutique: String!, description: String): Boutique 
    @field(resolver: "App\\GraphQL\\Mutations\\BoutiqueMutator@add")

  updateBoutique(nom_boutique: String, description: String): String 
    @field(resolver: "App\\GraphQL\\Mutations\\BoutiqueMutator@update")

  deleteBoutique: String 
    @field(resolver: "App\\GraphQL\\Mutations\\BoutiqueMutator@destroy")

  # Annonce management
  createAnnonce(
    description: String! @rules(apply: ["required", "string"])
    path_to_image: String! @rules(apply: ["string"])
  ): Annonce @field(resolver: "App\\GraphQL\\Mutations\\AnnonceMutator@create") @auth

  updateAnnonce(
    annonce_id: Int! @rules(apply: ["required"])
    description: String @rules(apply: ["string"])
    path_to_image: String @rules(apply: ["string"])
  ): Annonce @field(resolver: "App\\GraphQL\\Mutations\\AnnonceMutator@update") @auth

  deleteAnnonce(
    annonce_id: Int! @rules(apply: ["required"])
  ): Boolean @field(resolver: "App\\GraphQL\\Mutations\\AnnonceMutator@delete") @auth

  # Reservations management
  createReservation(
    centre_id: Int! @rules(apply: ["required", "integer"])
    date_debut: DateTime! @rules(apply: ["required", "date"])
    date_fin: DateTime! @rules(apply: ["required", "date"])
    note: String! @rules(apply: ["required", "string"])
    type: String! @rules(apply: ["required", "string"])
    nbr_place: Int! @rules(apply: ["required", "integer"])
  ): Reservations_centre @field(resolver: "App\\GraphQL\\Mutations\\ReservationCentreMutator@create") @auth

  destroyReservation(
    user_id: Int! @rules(apply: ["required", "integer"])
    centre_id: Int! @rules(apply: ["required", "integer"])
    date_debut: DateTime! @rules(apply: ["required", "date"])
    status: ReservationStatus
  ): Reservations_centre @field(resolver: "App\\GraphQL\\Mutations\\ReservationCentreMutator@destroy") @auth

  confirmReservation(
    input: ReservationIdentifierInput!
  ): ReservationMutationResponse! 
    @field(resolver: "App\\GraphQL\\Mutations\\ReservationCentreMutator@confirm") @auth

  rejectReservation(
    input: ReservationIdentifierInput!
  ): ReservationMutationResponse! 
    @field(resolver: "App\\GraphQL\\Mutations\\ReservationCentreMutator@reject") @auth
}
